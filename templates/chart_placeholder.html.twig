<div>
    <p>You can zoom in by selecting a part of the chart (drag a selection). <br />
       When zoomed in the chart will show a more detailed view, up to 15 minutes intervals!
    </p>
</div>
<div id="placeholder" style="width: {% if width is defined %}width{% else %}100%{% endif %}; height: 400px;"></div>

<script type="text/javascript">
var formatGW2Money = function(copper) {
    var string = "";

    var gold = Math.floor(copper / 10000);
    if (gold) {
        copper = copper % (gold * 10000);
        string += gold + "g ";
    }

    var silver = Math.floor(copper / 100);
    if (silver) {
        copper = copper % (silver * 100);
        if (silver) string += silver + "s ";
    }

    copper = Math.floor(copper);

    if (copper) string += copper + "c ";

    if (!string) {
        return copper + "c";
    } else {
        return string;
    }
};

var base_options = {
    grid: {
        hoverable: true,
    },
    tooltip:  true,
    tooltipOpts: {
        content:    "%s | %x | %y",
        stringFormat: {
            yFormat: formatGW2Money
        },
        dateFormat: "%Y-%m-%d %H:%M"
    },
    series: {
        lines:  { show: true },
        points: { show: true, radius: 3 }
    },
    xaxis: {
        mode:            "time",
        timeformat:      "%d-%b",
        twelveHourClock: false,
        minTickSize:     [1, "day"]
    },
    yaxis: {
        minTickSize: 1,
        tickFormatter: formatGW2Money
    }
};

var initchart = function(chartdata, callback) {
    var rawdata = $.parseJSON(chartdata);

    var placeholder = $("#placeholder");
    var plot;
    var options     = $.extend(true, {}, base_options, {
        selection: { mode: "x" }
    });
    var xaxis_default = null;

    placeholder.unbind();
    placeholder.bind("plotselected", function (event, ranges) {
        if (xaxis_default === null) {
            xaxis_default = {
                min: plot.getAxes().xaxis.datamin,
                max: plot.getAxes().xaxis.datamax
            };
        }

        render({ xaxis: { min: ranges.xaxis.from, max: ranges.xaxis.to } });
    });

    var smoothdata = function(mod) {
        var tmpdata = [];
        var chartdata = [];

        $.each(rawdata, function(i, dataset) {
            tmpdata[i] = $.extend(true, {}, dataset);
            tmpdata[i].data = {};
            $.each(dataset.data, function(ii, entry) {
                var timestamp = entry[0],
                    rounded = Math.round(timestamp / mod) * mod;
                tmpdata[i].data[rounded] = tmpdata[i].data[rounded] || {};
                tmpdata[i].data[rounded][timestamp] = entry[1];
            });
        });

        $.each(tmpdata, function(i, dataset) {
            chartdata[i] = $.extend(true, {}, dataset);
            chartdata[i].data = [];
            $.each(dataset.data, function(timestamp, values) {
                var value = 0, valuets = Infinity;
                $.each(values, function(vtimestamp, v) {
                    var tsdiff = (timestamp - vtimestamp);
                    if (tsdiff < 0) tsdiff *= -1;

                    if (tsdiff < valuets) {
                        valuets = tsdiff;
                        value   = v;
                    }
                });

                chartdata[i].data.push([parseInt(timestamp), value]);
            });
        });

        return chartdata;
    };

    var render = function(extraoptions) {
        var extraoptions  = extraoptions || {};
        var renderoptions = $.extend(true, {}, options, renderoptions, extraoptions);

        var min = Infinity, max = -Infinity;
        if (renderoptions.xaxis !== null && typeof(renderoptions.xaxis.min) !== 'undefined' && typeof(renderoptions.xaxis.max) !== 'undefined') {
            min = renderoptions.xaxis.min;
            max = renderoptions.xaxis.max;
        } else if (typeof(plot) !== 'undefined') {
            min = plot.getAxes().xaxis.min;
            max = plot.getAxes().xaxis.max;
        } else {
            $.each(rawdata, function(i, dataset) {
                $.each(dataset.data, function(ii, entry) {
                    var timestamp = entry[0];

                    min = min > timestamp ? timestamp : min;
                    max = max < timestamp ? timestamp : max;
                });
            });
        }

        var timespan_sec = (max - min) / 1000, timespan_hr = timespan_sec / 3600;
        var mod_sec = null, mod = null;

        if (timespan_hr <= 24) {
            mod_sec = 1;
        } else {
            mod_sec = Math.ceil(timespan_hr * 20);
        }

        if (mod_sec > 86400) {
            mod_sec = Math.round(mod_sec / 86400) * 86400;
        } else if (mod_sec > 3600) {
            mod_sec = Math.round(mod_sec / 3600) * 3600;
        }

        mod_sec = 3600;
        mod = mod_sec * 1000;

        plot = $.plot(placeholder, smoothdata(mod), renderoptions);

        // add zoom out button
        $('<div class="btn" style="right:20px; bottom:23px; position:absolute;">zoom out</div>').appendTo(placeholder).click(function (e) {
            e.preventDefault();

            plot.clearSelection();
            render({ xaxis: { min: xaxis_default.min, max: xaxis_default.max } });
        });

    }

    render();

    if (typeof(callback) == 'function') {
        callback();
    }
};

var fetchchart = function(callback) {
    $.ajax("{{ path('chart', {dataId: item.dataId}) }}", {
        success: function(chartdata) {
            initchart(chartdata, callback);
        }
    });
}

$(window).load(function() {
    fetchchart();
});
</script>
